{
  "name": "vscode-modal-editor",
  "displayName": "ModalEditor",
  "description": "Customizable extension to turn VS Code into a modal editor",
  "version": "1.5.0",
  "publisher": "DCsunset",
  "license": "AGPL-3.0",
  "repository": {
    "url": "https://github.com/DCsunset/vscode-modal-editor"
  },
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Keymaps",
    "Other"
  ],
  "keywords": [
    "modal",
    "editor",
    "keymaps"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension.js",
  "icon": "images/logo.png",
  "contributes": {
    "commands": [
      {
        "command": "modalEditor.setNormalMode",
        "title": "Modal Editor: Set mode to normal"
      },
      {
        "command": "modalEditor.setInsertMode",
        "title": "Modal Editor: Set mode to insert"
      },
      {
        "command": "modalEditor.setSelectMode",
        "title": "Modal Editor: Set mode to select"
      },
      {
        "command": "modalEditor.setCommandMode",
        "title": "Modal Editor: Set mode to command"
      },
      {
        "command": "modalEditor.importKeybindings",
        "title": "Modal Editor: Import keybindings"
      },
      {
        "command": "modalEditor.importPreset",
        "title": "Modal Editor: Import keybindings from preset directory"
      },
      {
        "command": "modalEditor.delete",
        "title": "Modal Editor: Delete current selection"
      },
      {
        "command": "modalEditor.yank",
        "title": "Modal Editor: Yank current selection to the register"
      },
      {
        "command": "modalEditor.cut",
        "title": "Modal Editor: Cut current selection to the register"
      },
      {
        "command": "modalEditor.paste",
        "title": "Modal Editor: Paste from the register"
      },
      {
        "command": "modalEditor.toUpperCase",
        "title": "Modal Editor: Transform current selection to upper case"
      },
      {
        "command": "modalEditor.toLowerCase",
        "title": "Modal Editor: Transform current selection to lower case"
      }
    ],
    "keybindings": [
      {
        "key": "escape",
        "command": "modalEditor.setNormalMode",
        "when": "editorTextFocus"
      },
      {
        "key": "escape",
        "command": "modalEditor.executeCommand",
        "args": [
          "cancelLinkedEditingInput",
          "modalEditor.setNormalMode"
        ],
        "when": "LinkedEditingInputVisible && editorTextFocus"
      },
      {
        "key": "escape",
        "command": "modalEditor.executeCommand",
        "args": [
          "cancelRenameInput",
          "modalEditor.setNormalMode"
        ],
        "when": "editorFocus && renameInputVisible"
      },
      {
        "key": "escape",
        "command": "modalEditor.executeCommand",
        "args": [
          "hideSuggestWidget",
          "modalEditor.setNormalMode"
        ],
        "when": "editorFocus && suggestWidgetVisible"
      },
      {
        "key": "escape",
        "command": "modalEditor.executeCommand",
        "args": [
          "closeAccessibilityHelp",
          "modalEditor.setNormalMode"
        ],
        "when": "accessibilityHelpWidgetVisible && editorFocus"
      },
      {
        "key": "escape",
        "command": "modalEditor.executeCommand",
        "args": [
          "closeBreakpointWidget",
          "modalEditor.setNormalMode"
        ],
        "when": "editorFocus && breakpointWidgetVisible"
      },
      {
        "key": "escape",
        "command": "modalEditor.executeCommand",
        "args": [
          "closeDirtyDiff",
          "modalEditor.setNormalMode"
        ],
        "when": "dirtyDiffVisible"
      },
      {
        "key": "escape",
        "command": "modalEditor.executeCommand",
        "args": [
          "closeFindWidget",
          "modalEditor.setNormalMode"
        ],
        "when": "editorFocus && findWidgetVisible"
      },
      {
        "key": "escape",
        "command": "modalEditor.executeCommand",
        "args": [
          "closeMarkersNavigation",
          "modalEditor.setNormalMode"
        ],
        "when": "editorFocus && markersNavigationVisible"
      },
      {
        "key": "escape",
        "command": "modalEditor.executeCommand",
        "args": [
          "closeParameterHints",
          "modalEditor.setNormalMode"
        ],
        "when": "editorFocus && parameterHintsVisible"
      },
      {
        "key": "backspace",
        "command": "modalEditor.setKeys",
        "args": "_ctx.keys.substring(0, _ctx.keys.length-1)",
        "when": "editorTextFocus && modalEditor.mode == 'command'"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Modal Editor",
      "properties": {
        "modalEditor.keybindings": {
          "type": "object",
          "description": "Keybindings to map keys to commands",
          "default": {}
        },
        "modalEditor.styles": {
          "type": "object",
          "description": "Styles for different modes",
          "default": {}
        },
        "modalEditor.misc.inclusiveRange": {
          "type": "boolean",
          "description": "Always include the character under cursor in selection",
          "default": true
        },
        "modalEditor.misc.ignoreUndefinedKeys": {
          "type": "boolean",
          "description": "Do not show error message for undefined keys",
          "default": false
        },
        "modalEditor.misc.modeStatusBarPriority": {
          "type": "number",
          "description": "Priority of mode status bar which shows the current mode (reload required after change)",
          "default": 0
        },
        "modalEditor.misc.keyStatusBarPriority": {
          "type": "number",
          "description": "Priority of key status bar which shows the current key sequence (reload required after change)",
          "default": 10000
        },
        "modalEditor.misc.presetDirectory": {
          "type": "string",
          "description": "Preset directory to easily import keybindings",
          "default": "~/.config/vscode-modal-editor"
        }
      }
    }
  },
  "scripts": {
    "release": "standard-version",
    "vscode:prepublish": "npm run compile",
    "compile": "npm run type-guard && rm -rf dist && tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "clean": "rm -rf dist",
    "type-guard": "ts-auto-guard",
    "test": "node ./dist/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.0",
    "@types/node": "14.x",
    "@types/vscode": "^1.60.0",
    "@typescript-eslint/eslint-plugin": "^5.16.0",
    "@typescript-eslint/parser": "^5.16.0",
    "@vscode/test-electron": "^2.1.3",
    "eslint": "^8.11.0",
    "glob": "^7.2.0",
    "mocha": "^9.2.2",
    "standard-version": "^9.3.2",
    "ts-auto-guard": "^2.4.1",
    "typescript": "^4.5.5"
  },
  "dependencies": {
    "axios": "^0.27.2"
  }
}
